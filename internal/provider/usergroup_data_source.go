// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-usergroup/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-usergroup/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-usergroup/internal/sdk/models/operations"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &UserGroupDataSource{}
var _ datasource.DataSourceWithConfigure = &UserGroupDataSource{}

func NewUserGroupDataSource() datasource.DataSource {
	return &UserGroupDataSource{}
}

// UserGroupDataSource is the data source implementation.
type UserGroupDataSource struct {
	client *sdk.SDK
}

// UserGroupDataSourceModel describes the data model.
type UserGroupDataSourceModel struct {
	CreatedAt   types.String         `tfsdk:"created_at"`
	CreatedBy   types.String         `tfsdk:"created_by"`
	CrtAssignee *tfTypes.CrtAssignee `tfsdk:"crt_assignee"`
	Hydrate     types.Bool           `tfsdk:"hydrate"`
	ID          types.String         `tfsdk:"id"`
	Name        types.String         `tfsdk:"name"`
	OrgID       types.String         `tfsdk:"org_id"`
	UpdatedAt   types.String         `tfsdk:"updated_at"`
	Users       []tfTypes.UserV2     `tfsdk:"users"`
}

// Metadata returns the data source type name.
func (r *UserGroupDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_user_group"
}

// Schema defines the schema for the data source.
func (r *UserGroupDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "UserGroup DataSource",

		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"created_by": schema.StringAttribute{
				Computed:    true,
				Description: `The user id of the user that created the group.`,
			},
			"crt_assignee": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"activated_at": schema.StringAttribute{
						Computed: true,
					},
					"created_at": schema.StringAttribute{
						Computed: true,
					},
					"crt_index": schema.NumberAttribute{
						Computed:    true,
						Description: `The index of the current assignee in the group's user list.`,
					},
					"custom_start_page": schema.StringAttribute{
						Computed:    true,
						Description: `User's start page after login`,
					},
					"department": schema.StringAttribute{
						Computed:    true,
						Description: `User's department`,
					},
					"display_name": schema.StringAttribute{
						Computed:    true,
						Description: `User's display name (default: email address)`,
					},
					"draft_email": schema.StringAttribute{
						Computed:    true,
						Description: `User's pending email address`,
					},
					"email": schema.StringAttribute{
						Computed:    true,
						Description: `User's email address`,
					},
					"email_notification_setting": schema.MapAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"favorites": schema.MapAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"feature_preferences": schema.MapAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `User's feature preferences`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `User's unique identifier`,
					},
					"image_uri": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"additional_properties": schema.StringAttribute{
								Computed:    true,
								Description: `Parsed as JSON.`,
							},
							"original": schema.StringAttribute{
								Computed: true,
							},
							"thumbnail_32": schema.StringAttribute{
								Computed: true,
							},
						},
						Description: `User's custom profile image`,
					},
					"is_signature_enabled": schema.BoolAttribute{
						Computed:    true,
						Description: `Whether the user's signature is enabled`,
					},
					"mfa_enabled": schema.BoolAttribute{
						Computed:    true,
						Description: `User's multi-factor authentication status`,
					},
					"organization_id": schema.StringAttribute{
						Computed: true,
					},
					"override_release_channel": schema.StringAttribute{
						Computed:    true,
						Description: `This field is used to override the release channel for the user.`,
					},
					"phone": schema.StringAttribute{
						Computed:    true,
						Description: `User's phone number`,
					},
					"phone_verified": schema.BoolAttribute{
						Computed:    true,
						Description: `User's phone number verification status`,
					},
					"preferred_language": schema.StringAttribute{
						Computed:    true,
						Description: `User's preferred language`,
					},
					"properties": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"name": schema.StringAttribute{
									Computed: true,
								},
								"value": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"secondary_phone": schema.StringAttribute{
						Computed:    true,
						Description: `User's secondary phone number, preferred for communication`,
					},
					"signature": schema.StringAttribute{
						Computed:    true,
						Description: `User's email signature`,
					},
					"status": schema.StringAttribute{
						Computed: true,
					},
					"token": schema.StringAttribute{
						Computed:    true,
						Description: `Token used to invite a user to epilot`,
					},
				},
				Description: `The current user assignee of the group. This is the user, from within the group, that has last been assigned to a workflow task.`,
			},
			"hydrate": schema.BoolAttribute{
				Optional:    true,
				Description: `Pass it true when you want to hydrate the group with full user details`,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `Group id`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `The name of the group. Could be a department or a team.`,
			},
			"org_id": schema.StringAttribute{
				Computed: true,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
			"users": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"activated_at": schema.StringAttribute{
							Computed: true,
						},
						"created_at": schema.StringAttribute{
							Computed: true,
						},
						"custom_start_page": schema.StringAttribute{
							Computed:    true,
							Description: `User's start page after login`,
						},
						"department": schema.StringAttribute{
							Computed:    true,
							Description: `User's department`,
						},
						"display_name": schema.StringAttribute{
							Computed:    true,
							Description: `User's display name (default: email address)`,
						},
						"draft_email": schema.StringAttribute{
							Computed:    true,
							Description: `User's pending email address`,
						},
						"email": schema.StringAttribute{
							Computed:    true,
							Description: `User's email address`,
						},
						"email_notification_setting": schema.MapAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
						"favorites": schema.MapAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
						"feature_preferences": schema.MapAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `User's feature preferences`,
						},
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `User's unique identifier`,
						},
						"image_uri": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"additional_properties": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"original": schema.StringAttribute{
									Computed: true,
								},
								"thumbnail_32": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `User's custom profile image`,
						},
						"is_signature_enabled": schema.BoolAttribute{
							Computed:    true,
							Description: `Whether the user's signature is enabled`,
						},
						"mfa_enabled": schema.BoolAttribute{
							Computed:    true,
							Description: `User's multi-factor authentication status`,
						},
						"organization_id": schema.StringAttribute{
							Computed: true,
						},
						"override_release_channel": schema.StringAttribute{
							Computed:    true,
							Description: `This field is used to override the release channel for the user.`,
						},
						"phone": schema.StringAttribute{
							Computed:    true,
							Description: `User's phone number`,
						},
						"phone_verified": schema.BoolAttribute{
							Computed:    true,
							Description: `User's phone number verification status`,
						},
						"preferred_language": schema.StringAttribute{
							Computed:    true,
							Description: `User's preferred language`,
						},
						"properties": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"name": schema.StringAttribute{
										Computed: true,
									},
									"value": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
						"secondary_phone": schema.StringAttribute{
							Computed:    true,
							Description: `User's secondary phone number, preferred for communication`,
						},
						"signature": schema.StringAttribute{
							Computed:    true,
							Description: `User's email signature`,
						},
						"status": schema.StringAttribute{
							Computed: true,
						},
						"token": schema.StringAttribute{
							Computed:    true,
							Description: `Token used to invite a user to epilot`,
						},
					},
				},
				Description: `The list of users in the group. Only contains the full user when respective endpoint is called with a flag. Otherwise only contains the user id.`,
			},
		},
	}
}

func (r *UserGroupDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *UserGroupDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *UserGroupDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var id string
	id = data.ID.ValueString()

	hydrate := new(bool)
	if !data.Hydrate.IsUnknown() && !data.Hydrate.IsNull() {
		*hydrate = data.Hydrate.ValueBool()
	} else {
		hydrate = nil
	}
	request := operations.GetGroupRequest{
		ID:      id,
		Hydrate: hydrate,
	}
	res, err := r.client.Group.GetGroup(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Group != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedGroup(res.Group)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

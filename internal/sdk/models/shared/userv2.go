// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-usergroup/internal/sdk/internal/utils"
	"time"
)

type Status string

const (
	StatusActive      Status = "Active"
	StatusPending     Status = "Pending"
	StatusDeactivated Status = "Deactivated"
	StatusDeleted     Status = "Deleted"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Active":
		fallthrough
	case "Pending":
		fallthrough
	case "Deactivated":
		fallthrough
	case "Deleted":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

// OverrideReleaseChannel - This field is used to override the release channel for the user.
type OverrideReleaseChannel string

const (
	OverrideReleaseChannelCanary OverrideReleaseChannel = "canary"
	OverrideReleaseChannelRc     OverrideReleaseChannel = "rc"
	OverrideReleaseChannelStable OverrideReleaseChannel = "stable"
)

func (e OverrideReleaseChannel) ToPointer() *OverrideReleaseChannel {
	return &e
}
func (e *OverrideReleaseChannel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "canary":
		fallthrough
	case "rc":
		fallthrough
	case "stable":
		*e = OverrideReleaseChannel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OverrideReleaseChannel: %v", v)
	}
}

// UserV2ImageURI - User's custom profile image
type UserV2ImageURI struct {
	Original             *string `json:"original,omitempty"`
	Thumbnail32          *string `json:"thumbnail_32,omitempty"`
	AdditionalProperties any     `additionalProperties:"true" json:"-"`
}

func (u UserV2ImageURI) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserV2ImageURI) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UserV2ImageURI) GetOriginal() *string {
	if o == nil {
		return nil
	}
	return o.Original
}

func (o *UserV2ImageURI) GetThumbnail32() *string {
	if o == nil {
		return nil
	}
	return o.Thumbnail32
}

func (o *UserV2ImageURI) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

type UserV2Properties struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

func (o *UserV2Properties) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UserV2Properties) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UserV2 struct {
	// User's unique identifier
	ID             *string    `json:"id,omitempty"`
	OrganizationID *string    `json:"organization_id,omitempty"`
	CreatedAt      *time.Time `json:"created_at,omitempty"`
	ActivatedAt    *time.Time `json:"activated_at,omitempty"`
	// User's display name (default: email address)
	DisplayName *string `json:"display_name,omitempty"`
	Status      *Status `json:"status,omitempty"`
	// User's email address
	Email *string `json:"email,omitempty"`
	// User's pending email address
	DraftEmail *string `json:"draft_email,omitempty"`
	// User's department
	Department *string `json:"department,omitempty"`
	// User's phone number
	Phone *string `json:"phone,omitempty"`
	// User's secondary phone number, preferred for communication
	SecondaryPhone *string `json:"secondary_phone,omitempty"`
	// User's multi-factor authentication status
	MfaEnabled *bool `json:"mfa_enabled,omitempty"`
	// User's phone number verification status
	PhoneVerified *bool `json:"phone_verified,omitempty"`
	// Token used to invite a user to epilot
	Token *string `json:"token,omitempty"`
	// User's email signature
	Signature *string `json:"signature,omitempty"`
	// Whether the user's signature is enabled
	IsSignatureEnabled *bool `json:"is_signature_enabled,omitempty"`
	// User's preferred language
	PreferredLanguage *string `json:"preferred_language,omitempty"`
	// User's start page after login
	CustomStartPage *string `default:"/app/dashboard" json:"custom_start_page"`
	// This field is used to override the release channel for the user.
	OverrideReleaseChannel *OverrideReleaseChannel `json:"override_release_channel,omitempty"`
	// User's feature preferences
	FeaturePreferences map[string]any `json:"feature_preferences,omitempty"`
	// User's custom profile image
	ImageURI                 *UserV2ImageURI    `json:"image_uri,omitempty"`
	Favorites                map[string]any     `json:"favorites,omitempty"`
	EmailNotificationSetting map[string]any     `json:"email_notification_setting,omitempty"`
	Properties               []UserV2Properties `json:"properties,omitempty"`
}

func (u UserV2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserV2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UserV2) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UserV2) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *UserV2) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UserV2) GetActivatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ActivatedAt
}

func (o *UserV2) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *UserV2) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UserV2) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *UserV2) GetDraftEmail() *string {
	if o == nil {
		return nil
	}
	return o.DraftEmail
}

func (o *UserV2) GetDepartment() *string {
	if o == nil {
		return nil
	}
	return o.Department
}

func (o *UserV2) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *UserV2) GetSecondaryPhone() *string {
	if o == nil {
		return nil
	}
	return o.SecondaryPhone
}

func (o *UserV2) GetMfaEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.MfaEnabled
}

func (o *UserV2) GetPhoneVerified() *bool {
	if o == nil {
		return nil
	}
	return o.PhoneVerified
}

func (o *UserV2) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *UserV2) GetSignature() *string {
	if o == nil {
		return nil
	}
	return o.Signature
}

func (o *UserV2) GetIsSignatureEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.IsSignatureEnabled
}

func (o *UserV2) GetPreferredLanguage() *string {
	if o == nil {
		return nil
	}
	return o.PreferredLanguage
}

func (o *UserV2) GetCustomStartPage() *string {
	if o == nil {
		return nil
	}
	return o.CustomStartPage
}

func (o *UserV2) GetOverrideReleaseChannel() *OverrideReleaseChannel {
	if o == nil {
		return nil
	}
	return o.OverrideReleaseChannel
}

func (o *UserV2) GetFeaturePreferences() map[string]any {
	if o == nil {
		return nil
	}
	return o.FeaturePreferences
}

func (o *UserV2) GetImageURI() *UserV2ImageURI {
	if o == nil {
		return nil
	}
	return o.ImageURI
}

func (o *UserV2) GetFavorites() map[string]any {
	if o == nil {
		return nil
	}
	return o.Favorites
}

func (o *UserV2) GetEmailNotificationSetting() map[string]any {
	if o == nil {
		return nil
	}
	return o.EmailNotificationSetting
}

func (o *UserV2) GetProperties() []UserV2Properties {
	if o == nil {
		return nil
	}
	return o.Properties
}

type UserV2Input struct {
	OrganizationID *string    `json:"organization_id,omitempty"`
	CreatedAt      *time.Time `json:"created_at,omitempty"`
	ActivatedAt    *time.Time `json:"activated_at,omitempty"`
	// User's display name (default: email address)
	DisplayName *string `json:"display_name,omitempty"`
	Status      *Status `json:"status,omitempty"`
	// User's email address
	Email *string `json:"email,omitempty"`
	// User's pending email address
	DraftEmail *string `json:"draft_email,omitempty"`
	// User's department
	Department *string `json:"department,omitempty"`
	// User's phone number
	Phone *string `json:"phone,omitempty"`
	// User's secondary phone number, preferred for communication
	SecondaryPhone *string `json:"secondary_phone,omitempty"`
	// User's multi-factor authentication status
	MfaEnabled *bool `json:"mfa_enabled,omitempty"`
	// User's phone number verification status
	PhoneVerified *bool `json:"phone_verified,omitempty"`
	// Token used to invite a user to epilot
	Token *string `json:"token,omitempty"`
	// User's email signature
	Signature *string `json:"signature,omitempty"`
	// Whether the user's signature is enabled
	IsSignatureEnabled *bool `json:"is_signature_enabled,omitempty"`
	// User's preferred language
	PreferredLanguage *string `json:"preferred_language,omitempty"`
	// User's start page after login
	CustomStartPage *string `default:"/app/dashboard" json:"custom_start_page"`
	// This field is used to override the release channel for the user.
	OverrideReleaseChannel *OverrideReleaseChannel `json:"override_release_channel,omitempty"`
	// User's feature preferences
	FeaturePreferences map[string]any `json:"feature_preferences,omitempty"`
	// User's custom profile image
	ImageURI                 *UserV2ImageURI    `json:"image_uri,omitempty"`
	Favorites                map[string]any     `json:"favorites,omitempty"`
	EmailNotificationSetting map[string]any     `json:"email_notification_setting,omitempty"`
	Properties               []UserV2Properties `json:"properties,omitempty"`
}

func (u UserV2Input) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserV2Input) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UserV2Input) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *UserV2Input) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UserV2Input) GetActivatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ActivatedAt
}

func (o *UserV2Input) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *UserV2Input) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UserV2Input) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *UserV2Input) GetDraftEmail() *string {
	if o == nil {
		return nil
	}
	return o.DraftEmail
}

func (o *UserV2Input) GetDepartment() *string {
	if o == nil {
		return nil
	}
	return o.Department
}

func (o *UserV2Input) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *UserV2Input) GetSecondaryPhone() *string {
	if o == nil {
		return nil
	}
	return o.SecondaryPhone
}

func (o *UserV2Input) GetMfaEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.MfaEnabled
}

func (o *UserV2Input) GetPhoneVerified() *bool {
	if o == nil {
		return nil
	}
	return o.PhoneVerified
}

func (o *UserV2Input) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *UserV2Input) GetSignature() *string {
	if o == nil {
		return nil
	}
	return o.Signature
}

func (o *UserV2Input) GetIsSignatureEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.IsSignatureEnabled
}

func (o *UserV2Input) GetPreferredLanguage() *string {
	if o == nil {
		return nil
	}
	return o.PreferredLanguage
}

func (o *UserV2Input) GetCustomStartPage() *string {
	if o == nil {
		return nil
	}
	return o.CustomStartPage
}

func (o *UserV2Input) GetOverrideReleaseChannel() *OverrideReleaseChannel {
	if o == nil {
		return nil
	}
	return o.OverrideReleaseChannel
}

func (o *UserV2Input) GetFeaturePreferences() map[string]any {
	if o == nil {
		return nil
	}
	return o.FeaturePreferences
}

func (o *UserV2Input) GetImageURI() *UserV2ImageURI {
	if o == nil {
		return nil
	}
	return o.ImageURI
}

func (o *UserV2Input) GetFavorites() map[string]any {
	if o == nil {
		return nil
	}
	return o.Favorites
}

func (o *UserV2Input) GetEmailNotificationSetting() map[string]any {
	if o == nil {
		return nil
	}
	return o.EmailNotificationSetting
}

func (o *UserV2Input) GetProperties() []UserV2Properties {
	if o == nil {
		return nil
	}
	return o.Properties
}

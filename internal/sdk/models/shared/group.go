// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-usergroup/internal/sdk/internal/utils"
	"time"
)

type GroupStatus string

const (
	GroupStatusActive      GroupStatus = "Active"
	GroupStatusPending     GroupStatus = "Pending"
	GroupStatusDeactivated GroupStatus = "Deactivated"
	GroupStatusDeleted     GroupStatus = "Deleted"
)

func (e GroupStatus) ToPointer() *GroupStatus {
	return &e
}
func (e *GroupStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Active":
		fallthrough
	case "Pending":
		fallthrough
	case "Deactivated":
		fallthrough
	case "Deleted":
		*e = GroupStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupStatus: %v", v)
	}
}

// GroupOverrideReleaseChannel - This field is used to override the release channel for the user.
type GroupOverrideReleaseChannel string

const (
	GroupOverrideReleaseChannelCanary GroupOverrideReleaseChannel = "canary"
	GroupOverrideReleaseChannelRc     GroupOverrideReleaseChannel = "rc"
	GroupOverrideReleaseChannelStable GroupOverrideReleaseChannel = "stable"
)

func (e GroupOverrideReleaseChannel) ToPointer() *GroupOverrideReleaseChannel {
	return &e
}
func (e *GroupOverrideReleaseChannel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "canary":
		fallthrough
	case "rc":
		fallthrough
	case "stable":
		*e = GroupOverrideReleaseChannel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupOverrideReleaseChannel: %v", v)
	}
}

// GroupImageURI - User's custom profile image
type GroupImageURI struct {
	Original             *string `json:"original,omitempty"`
	Thumbnail32          *string `json:"thumbnail_32,omitempty"`
	AdditionalProperties any     `additionalProperties:"true" json:"-"`
}

func (g GroupImageURI) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GroupImageURI) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GroupImageURI) GetOriginal() *string {
	if o == nil {
		return nil
	}
	return o.Original
}

func (o *GroupImageURI) GetThumbnail32() *string {
	if o == nil {
		return nil
	}
	return o.Thumbnail32
}

func (o *GroupImageURI) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

type GroupProperties struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

func (o *GroupProperties) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GroupProperties) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CrtAssignee - The current user assignee of the group. This is the user, from within the group, that has last been assigned to a workflow task.
type CrtAssignee struct {
	// User's unique identifier
	ID             *string    `json:"id,omitempty"`
	OrganizationID *string    `json:"organization_id,omitempty"`
	CreatedAt      *time.Time `json:"created_at,omitempty"`
	ActivatedAt    *time.Time `json:"activated_at,omitempty"`
	// User's display name (default: email address)
	DisplayName *string      `json:"display_name,omitempty"`
	Status      *GroupStatus `json:"status,omitempty"`
	// User's email address
	Email *string `json:"email,omitempty"`
	// User's pending email address
	DraftEmail *string `json:"draft_email,omitempty"`
	// User's department
	Department *string `json:"department,omitempty"`
	// User's phone number
	Phone *string `json:"phone,omitempty"`
	// User's secondary phone number, preferred for communication
	SecondaryPhone *string `json:"secondary_phone,omitempty"`
	// User's multi-factor authentication status
	MfaEnabled *bool `json:"mfa_enabled,omitempty"`
	// User's phone number verification status
	PhoneVerified *bool `json:"phone_verified,omitempty"`
	// Token used to invite a user to epilot
	Token *string `json:"token,omitempty"`
	// User's email signature
	Signature *string `json:"signature,omitempty"`
	// Whether the user's signature is enabled
	IsSignatureEnabled *bool `json:"is_signature_enabled,omitempty"`
	// User's preferred language
	PreferredLanguage *string `json:"preferred_language,omitempty"`
	// User's start page after login
	CustomStartPage *string `default:"/app/dashboard" json:"custom_start_page"`
	// This field is used to override the release channel for the user.
	OverrideReleaseChannel *GroupOverrideReleaseChannel `json:"override_release_channel,omitempty"`
	// User's feature preferences
	FeaturePreferences map[string]any `json:"feature_preferences,omitempty"`
	// User's custom profile image
	ImageURI                 *GroupImageURI    `json:"image_uri,omitempty"`
	Favorites                map[string]any    `json:"favorites,omitempty"`
	EmailNotificationSetting map[string]any    `json:"email_notification_setting,omitempty"`
	Properties               []GroupProperties `json:"properties,omitempty"`
	// The index of the current assignee in the group's user list.
	CrtIndex *float64 `json:"crt_index,omitempty"`
}

func (c CrtAssignee) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CrtAssignee) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CrtAssignee) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CrtAssignee) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *CrtAssignee) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CrtAssignee) GetActivatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ActivatedAt
}

func (o *CrtAssignee) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *CrtAssignee) GetStatus() *GroupStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CrtAssignee) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CrtAssignee) GetDraftEmail() *string {
	if o == nil {
		return nil
	}
	return o.DraftEmail
}

func (o *CrtAssignee) GetDepartment() *string {
	if o == nil {
		return nil
	}
	return o.Department
}

func (o *CrtAssignee) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *CrtAssignee) GetSecondaryPhone() *string {
	if o == nil {
		return nil
	}
	return o.SecondaryPhone
}

func (o *CrtAssignee) GetMfaEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.MfaEnabled
}

func (o *CrtAssignee) GetPhoneVerified() *bool {
	if o == nil {
		return nil
	}
	return o.PhoneVerified
}

func (o *CrtAssignee) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *CrtAssignee) GetSignature() *string {
	if o == nil {
		return nil
	}
	return o.Signature
}

func (o *CrtAssignee) GetIsSignatureEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.IsSignatureEnabled
}

func (o *CrtAssignee) GetPreferredLanguage() *string {
	if o == nil {
		return nil
	}
	return o.PreferredLanguage
}

func (o *CrtAssignee) GetCustomStartPage() *string {
	if o == nil {
		return nil
	}
	return o.CustomStartPage
}

func (o *CrtAssignee) GetOverrideReleaseChannel() *GroupOverrideReleaseChannel {
	if o == nil {
		return nil
	}
	return o.OverrideReleaseChannel
}

func (o *CrtAssignee) GetFeaturePreferences() map[string]any {
	if o == nil {
		return nil
	}
	return o.FeaturePreferences
}

func (o *CrtAssignee) GetImageURI() *GroupImageURI {
	if o == nil {
		return nil
	}
	return o.ImageURI
}

func (o *CrtAssignee) GetFavorites() map[string]any {
	if o == nil {
		return nil
	}
	return o.Favorites
}

func (o *CrtAssignee) GetEmailNotificationSetting() map[string]any {
	if o == nil {
		return nil
	}
	return o.EmailNotificationSetting
}

func (o *CrtAssignee) GetProperties() []GroupProperties {
	if o == nil {
		return nil
	}
	return o.Properties
}

func (o *CrtAssignee) GetCrtIndex() *float64 {
	if o == nil {
		return nil
	}
	return o.CrtIndex
}

type Group struct {
	// Group unique identifier
	ID    string `json:"id"`
	OrgID string `json:"org_id"`
	// The name of the group. Could be a department or a team.
	Name      string `json:"name"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
	// The user id of the user that created the group.
	CreatedBy *string `json:"created_by,omitempty"`
	// The current user assignee of the group. This is the user, from within the group, that has last been assigned to a workflow task.
	CrtAssignee *CrtAssignee `json:"crt_assignee,omitempty"`
	// The list of users in the group. Only contains the full user when respective endpoint is called with a flag. Otherwise only contains the user id.
	Users []UserV2 `json:"users,omitempty"`
}

func (o *Group) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Group) GetOrgID() string {
	if o == nil {
		return ""
	}
	return o.OrgID
}

func (o *Group) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Group) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *Group) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *Group) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Group) GetCrtAssignee() *CrtAssignee {
	if o == nil {
		return nil
	}
	return o.CrtAssignee
}

func (o *Group) GetUsers() []UserV2 {
	if o == nil {
		return nil
	}
	return o.Users
}
